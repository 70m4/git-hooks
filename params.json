{"name":"Git-hooks","tagline":"Hook manager","body":"git-hooks is at a stage of able to manage client-side hooks, it will support server-side hooks future.\r\n\r\ngit-hooks is a fork of [icefox/git-hooks](https://github.com/icefox/git-hooks), and [managing-project-user-and-global-git.html](http://benjamin-meyer.blogspot.jp/2010/06/managing-project-user-and-global-git.html) tells much of what git-hooks pretend to do. Through, I will explain it with the new feature comes with git-hooks.\r\n\r\n## Terminology\r\n\r\n* git-hooks: The tool created by this repo\r\n* trigger: Hook type such as pre-commit and commit-msg\r\n* hook: Specific hook\r\n* community hook: common used hook. In the source code of `git-hooks`, it also referred as `contrib` hook.\r\n\r\n## Usage\r\n\r\nRun `git hooks install` to tell a git repo to use git-hooks.\r\n\r\nStop using git-hooks by `git hooks uninstall`.\r\n\r\nList all scope of hooks by execute `git hooks` directly. See below for what scope is.\r\n\r\n## Scope\r\ngit-hooks try to reduce hooks copy and symbolic link by properly manage them.\r\n\r\nTake pre-commit hook as an example, when git triggers pre-commit, git-hooks route the execution to `githooks` directory under the repo directory, `~/.githooks` directory under home directory and directory configured by `git config --set --system hooks.global`.\r\n\r\nThese three directories are called `project` scope, `user` scope and `global` scope.\r\n\r\n`project` scope hooks reside under repo directory, example layout is\r\n\r\n```\r\nsome-project\r\n└── githooks\r\n    ├── commit-msg\r\n    │   └── check\r\n    │   └── check2\r\n    └── pre-commit\r\n        └── check\r\n        └── check2\r\n```\r\n\r\nWhen triggers pre-commit, all hooks under `githooks/pre-commit` will be executed.\r\n\r\nBy `project` scope, we can add project related hooks into version control and separate them into multi files.\r\n\r\n`user` scope hooks reside under home directory with the name of `.githooks`, the same directory structure as `project` scope hooks. It allow you to setup personal hooks for all your projects.\r\n\r\n```\r\nhome\r\n└── someuser\r\n    └── .githooks\r\n        ├── commit-msg\r\n        │   └── check\r\n        │   └── check2\r\n        └── pre-commit\r\n            └── check\r\n            └── check2\r\n```\r\n\r\n`global` scope hooks is configured via `hooks.global` entry in git system wide configuration file. When configured, it is possible for multi user in the same machine share the same hooks.\r\n\r\n```\r\nusr\r\n└── local\r\n    └── share\r\n        └── githooks\r\n            ├── commit-msg\r\n            │   └── check\r\n            │   └── check2\r\n            └── pre-commit\r\n                └── check\r\n                └── check2\r\n```\r\n\r\nAnd in git system configuration file (maybe /etc/gitconfig or /usr/local/etc/gitconfig, use `git config --system --set hooks.global` to setup)\r\n\r\n```\r\n[hooks]\r\n\tglobal = /usr/local/share/githooks\r\n```\r\n\r\nWait a minute, what if I want to have a hook for a particular project and particular user. It can't be added in version control and can't be added into `user` scope directory. The solution is `semi` scope.\r\n\r\n`semi` scope actually reside inside `project` scope,\r\n\r\n```\r\nsome-project\r\n└── githooks\r\n    ├── .gitignore\r\n    ├── _pre-commit\r\n    │   └── check\r\n    │   └── check2\r\n    ├── commit-msg\r\n    │   └── check\r\n    │   └── check2\r\n    └── pre-commit\r\n        └── check\r\n        └── check2\r\n```\r\n\r\nActually when git triggers pre-commit, all hooks under `githooks/pre-commit` **and** `git-hooks/_pre-commit` will be executed.\r\n\r\nIn order to setup hook as user related, `.gitignore` should be written as\r\n\r\n    _*\r\n\r\n## Community hook\r\ngit-hooks differ from [icefox/git-hooks](https://github.com/icefox/git-hooks) by enabling community hooks.\r\n\r\nTake pre-commit and `project` scope hooks as an example, when git triggers pre-commit, besides from scanning `githooks`, git-hooks also read `githooks.json`, example `githooks.json` is\r\n\r\n```javascript\r\n{\r\n    \"pre-commit\": {\r\n        \"github.com/git-hooks/contrib\": [\r\n            \"bash_syntax\",\r\n            \"jshint\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nHooks under `\"pre-commit\"` field will be executed, it is organized as git repo, the repo will be clone into `~/.githooks-contrib` directory under your home directory if it's not yet exists.\r\n\r\nSee [Community hooks](https://github.com/git-hooks/git-hooks/wiki/Community-hooks) for more info.\r\n\r\n![xmind](assets/xmind.png)","google":"UA-41494270-3","note":"Don't delete this file! It's used internally to help with page regeneration."}