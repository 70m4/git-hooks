{"name":"Git-hooks","tagline":"Hook manager","body":"git-hooks is currently at the stage of managing client-side hooks. It will support server-side hooks future.\r\n\r\ngit-hooks is a fork of [icefox/git-hooks][]. The article “[Managing Project, User, and Global git hooks][]” explains much of the purpose of using git-hooks. \r\n\r\nBelow, I will explain git-hooks as well as the new features in this fork.\r\n\r\n\r\n[Managing Project, User, and Global git hooks]: http://benjamin-meyer.blogspot.jp/2010/06/managing-project-user-and-global-git.html\r\n\r\n\r\n## Terminology\r\n\r\n* __git-hooks:__ The tool created by this repo\r\n* __trigger:__ Hook type (such as `pre-commit` and `commit-msg`)\r\n* __hook:__ Specific hook\r\n* __community hook:__ a commonly used hook. Also referred to as `contrib` hooks in the source code.\r\n\r\n## Usage\r\n\r\nRun `git hooks install` to tell a git repo to use git-hooks.\r\n\r\nStop using git-hooks by `git hooks uninstall`.\r\n\r\nList all scope of hooks by execute `git hooks` directly. See below for what scope is.\r\n\r\n\r\n## Scope\r\ngit-hooks tries to reduce hook copies by using symbolic links to manage them.\r\n\r\nTake `pre-commit` hook as an example. When git triggers `pre-commit`, git-hooks routes the execution to:\r\n\r\n1. `githooks` directory under the repo directory,\r\n1. `~/.githooks` directory under home directory, and \r\n1. the directory configured by `git config --set --system hooks.global`.\r\n\r\nThese three directories are called `project` scope, `user` scope, and `global` scope.\r\n\r\n`project` scope hooks reside under repo directory. Here’s an example layout:\r\n\r\n```\r\nsome-project\r\n└── githooks\r\n    ├── commit-msg\r\n    │   └── check\r\n    │   └── check2\r\n    └── pre-commit\r\n        └── check\r\n        └── check2\r\n```\r\n\r\nWhen git triggers `pre-commit`, all hooks under `githooks/pre-commit` will be executed.\r\n\r\nBy `project` scope, we can add project-related hooks into version control, and separate them into multiple files.\r\n\r\n`user` hooks reside in the user’s home directory under the name `.githooks`.  It contains the same directory structure as `project` hooks. With user hooks, you can setup personal hooks for all your projects.\r\n\r\n```\r\nhome\r\n└── someuser\r\n    └── .githooks\r\n        ├── commit-msg\r\n        │   └── check\r\n        │   └── check2\r\n        └── pre-commit\r\n            └── check\r\n            └── check2\r\n```\r\n\r\n`global` scope hooks is configured via `hooks.global` entry in git's system-wide configuration. It allows multiple users on the same machine to share hooks.\r\n\r\n```\r\nusr\r\n└── local\r\n    └── share\r\n        └── githooks\r\n            ├── commit-msg\r\n            │   └── check\r\n            │   └── check2\r\n            └── pre-commit\r\n                └── check\r\n                └── check2\r\n```\r\n\r\nGit's system configuration is usually found in `/etc/gitconfig` or `/usr/local/etc/gitconfig`.\r\n\r\nUse `git config --system --set hooks.global` to setup your global hooks directory.\r\n\r\n```\r\n[hooks]\r\n\tglobal = /usr/local/share/githooks\r\n```\r\n\r\nWait a minute.... What if I want to have a hook for a particular project *and* particular user? It can't be added in version control, or into `user` scope directory. \r\n\r\nThe solution is `semi` scope. `semi` scope actually reside inside `project` scope,\r\n\r\n```\r\nsome-project\r\n└── githooks\r\n    ├── .gitignore\r\n    ├── _pre-commit\r\n    │   └── check\r\n    │   └── check2\r\n    ├── commit-msg\r\n    │   └── check\r\n    │   └── check2\r\n    └── pre-commit\r\n        └── check\r\n        └── check2\r\n```\r\n\r\nNow, when git triggers `pre-commit`, all hooks under `githooks/pre-commit` **and** `git-hooks/_pre-commit` will be executed.\r\n\r\nIn order to setup hooks as user-related, `.gitignore` should be written as\r\n\r\n    _*\r\n\r\n\r\n## Community Hooks\r\nThis is where git-hooks differs from [icefox/git-hooks][]; it adds the feature of **community hooks**.\r\n\r\nLet’s look at the `pre-commit` hook in `project` scope. When git triggers `pre-commit`, besides scanning `githooks`, git-hooks also read `githooks.json`. \r\n\r\nFor this example, the contents of `githooks.json` are:\r\n\r\n```javascript\r\n{\r\n    \"pre-commit\": {\r\n        \"github.com/git-hooks/contrib\": [\r\n            \"bashlint\",\r\n            \"jshint\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nIn the JSON, hooks under the `\"pre-commit\"` field will be executed. \r\n\r\nIt’s organized as another git repository. The repository will be cloned into the `~/.githooks-contrib` directory. (It will be created if it doesn't exist.)\r\n\r\nSee [Community hooks][] for more info.\r\n\r\n![xmind](assets/xmind.png)\r\n\r\n\r\n[icefox/git-hooks]: https://github.com/icefox/git-hooks\r\n[Community hooks]: https://github.com/git-hooks/git-hooks/wiki/Community-hooks","google":"UA-41494270-3","note":"Don't delete this file! It's used internally to help with page regeneration."}